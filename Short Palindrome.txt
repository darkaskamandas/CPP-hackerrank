#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <numeric>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vector <int> > vvi;
typedef vector<pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME "a"


const int MAXN = 1e6 + 10;
const int A = 26;
const int MOD = 1e9 + 7;

void add(int& x, int y) {
	((x += y) >= MOD) && (x -= MOD);
}

int mul(int x, int y) {
	return x * 1ll * y % MOD;
}

int a[MAXN];
int n;
int cnt[MAXN][A];
int cntp[A][A];

bool read() {
	static char s[MAXN];
	gets(s);
	n = strlen(s);
	forn(i, n) {
		a[i] = s[i] - 'a';
	}
	return true;
}

void precalc() {
	memset (cnt, 0, sizeof cnt);
	forn(i, n) {
		forn(c, A) {
			cnt[i + 1][c] = cnt[i][c] + (a[i] == c);
		}
	}
}

int get_cnt(int l, int r, int c) {
	if  (l > r) return 0;
	return cnt[r + 1][c] - cnt[l][c];
}

int solve() {
	precalc();
	memset (cntp, 0, sizeof cntp);

	int ans = 0;
	forn(i, n) {
		forn(c, A) {
			int right = get_cnt(i + 1, n - 1, c);
			int left = cntp[c][a[i]];
			add(ans, mul(left, right));
		}

		forn(c, A) {
			add(cntp[c][a[i]], get_cnt(0, i - 1, c));
		}
	}

	return ans;
}

int main() {
#ifdef LOCAL
	freopen(FILE_NAME ".in", "r", stdin);
	// freopen(FILE_NAME ".out", "w", stdout);
#endif

	assert(read());
	printf("%d\n", solve());

#ifdef LOCAL
	cerr.precision(5);
	cerr << "Time: " << fixed << (double) clock() / CLOCKS_PER_SEC << endl;
#endif
	return 0;
}